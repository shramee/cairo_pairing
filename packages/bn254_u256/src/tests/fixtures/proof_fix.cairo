use super::lines_fix::{gamma_lines, delta_lines};
use bn254_u256::{CubicScale, PtG1, PtG2, Fq2, Fq12, fq2, fq12, g1, g2};
use bn254_u256::{Groth16Circuit, LnArrays, InputConstraintPoints};

pub fn vk() -> (PtG1, PtG2, PtG2, PtG2, Fq12, Array<PtG1>) {
    let mut alpha = g1(
        20491192805390485299153009773594534940189261866228447918068658471970481763042,
        9383485363053290200918347156157836566562967994039712273449902621266178545958
    );
    let beta = g2(
        6375614351688725206403948262868962793625744043794305715222011528459656738731,
        4252822878758300859123897981450591353533073413197771768651442665752259397132,
        10505242626370262277552901082094356697409835680220590971873171140371331206856,
        21847035105528745403288232691147584728191162732299865338377159692350059136679
    );
    let gamma = g2(
        10857046999023057135944570762232829481370756359578518086990519993285655852781,
        11559732032986387107991004021392285783925812861821192530917403151452391805634,
        8495653923123431417604973247489272438418190587263600148770280649306958101930,
        4082367875863433681332203403145435568316851327593401208105741076214120093531
    );
    let delta = g2(
        18843522656454103229460441939617973919282852773928454389351548381771109175804,
        20939788735433971235553050176856161353732417040828392785429509147312127378598,
        20154620275540267962893477662314018482859018034691595131178696575286779357689,
        4547106032091524596969837323375385497187441697194445474662172759730343393129
    );
    let ic = array![
        g1(
            1655549413518972190198478012616802994254462093161203201613599472264958303841,
            21742734017792296281216385119397138748114275727065024271646515586404591497876
        ),
        g1(
            16497930821522159474595176304955625435616718625609462506360632944366974274906,
            10404924572941018678793755094259635830045501866471999610240845041996101882275
        )
    ];
    let _neg_albe_miller = fq12(
        0x27c20318505e03cea84a04223b8679a6c84c1e55e83957a21e8986c1b8140510,
        0x104bb1b78f934618c94ba0290a964c58f1400e450e9e19680c39a8aca6fa15f4,
        0x2e56f81476f8d79f0caef927ac110b77cec88490d0860c746d82583440bb8919,
        0x1a814cb6d1fa262a5882e06c097fd68c05fdd1f27e2288f84726985dea9706e,
        0x19bdc2cd81965796abc4dd1ac13a5941ce94ead67c26445a67ca63f07def54fa,
        0xe328b63e1f95c3e6208878e9ca68fa49960e71588c6302c244b428b2cf5aa6,
        0x159ad96d8a0f81d1e048379cb2dee2671581cb84e58de9cbf2d4ea8d11a5a262,
        0xf63ca25374f5b91be7d57a067f1e5ec7a906be473fb01f091d1793fd999b926,
        0x231b22b4c91411c1aeb9724839622abf9d9297cad863a0312452df9f56e9872a,
        0x2cc3c64540e5e5af46b3c583a7314a94fedb672da5da977c6ac70927247c73bb,
        0xbd670107051399799978f2a70d7a08ed0bb130d1fa74638dce3d81536701c96,
        0x221446e74ef53a921abb7b8a0fa2afee56481780d136bc649916f1beeb52aaa
    );
    let _alphabeta_miller = fq12(
        0x27c20318505e03cea84a04223b8679a6c84c1e55e83957a21e8986c1b8140510,
        0x104bb1b78f934618c94ba0290a964c58f1400e450e9e19680c39a8aca6fa15f4,
        0x2e56f81476f8d79f0caef927ac110b77cec88490d0860c746d82583440bb8919,
        0x1a814cb6d1fa262a5882e06c097fd68c05fdd1f27e2288f84726985dea9706e,
        0x19bdc2cd81965796abc4dd1ac13a5941ce94ead67c26445a67ca63f07def54fa,
        0xe328b63e1f95c3e6208878e9ca68fa49960e71588c6302c244b428b2cf5aa6,
        0x1ac9750557221e57d8080e19cea275f681ff9f0c82e3e0c1494ba189c6d75ae5,
        0x2100844da9e24497f9d2ee16198f72711cf0feacf476c89caa4f12d6fee34421,
        0xd492bbe181d8e680996d36e481f2d9df9eed2c6900e2a5c17cdac778193761d,
        0x3a0882da04bba7a719c8032da500dc898a60363c2973310d15982efb400898c,
        0x248dde6270e066921eb8b68c10a9b7cec6c6578448ca84545f3cb401a20ce0b1,
        0x2e430a046c424c8096a48dfde0872d5eb21ce9195b5e5ec6f28f1cfae9c7d29d
    );
    (alpha, beta, gamma, delta, _neg_albe_miller, ic)
}

pub fn circuit_setup() -> Groth16Circuit<PtG1, PtG2, LnArrays, InputConstraintPoints, Fq12> {
    let (_alpha, _beta, gamma, delta, _alphabeta_miller, _ic) = vk();
    Groth16Circuit::<
        PtG1, PtG2, LnArrays, InputConstraintPoints, Fq12
    > {
        alpha_beta: fq12(
            0x27c20318505e03cea84a04223b8679a6c84c1e55e83957a21e8986c1b8140510,
            0x104bb1b78f934618c94ba0290a964c58f1400e450e9e19680c39a8aca6fa15f4,
            0x2e56f81476f8d79f0caef927ac110b77cec88490d0860c746d82583440bb8919,
            0x1a814cb6d1fa262a5882e06c097fd68c05fdd1f27e2288f84726985dea9706e,
            0x19bdc2cd81965796abc4dd1ac13a5941ce94ead67c26445a67ca63f07def54fa,
            0xe328b63e1f95c3e6208878e9ca68fa49960e71588c6302c244b428b2cf5aa6,
            0x159ad96d8a0f81d1e048379cb2dee2671581cb84e58de9cbf2d4ea8d11a5a262,
            0xf63ca25374f5b91be7d57a067f1e5ec7a906be473fb01f091d1793fd999b926,
            0x231b22b4c91411c1aeb9724839622abf9d9297cad863a0312452df9f56e9872a,
            0x2cc3c64540e5e5af46b3c583a7314a94fedb672da5da977c6ac70927247c73bb,
            0xbd670107051399799978f2a70d7a08ed0bb130d1fa74638dce3d81536701c96,
            0x221446e74ef53a921abb7b8a0fa2afee56481780d136bc649916f1beeb52aaa
        ),
        gamma: g2(
            0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed,
            0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,
            0x1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d,
            0x275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec
        ),
        gamma_neg: gamma,
        delta: g2(
            0x29a90e4d611e9d08120c9dc6d165625795d3f80ea2b9831b8e16693e4d7f11fc,
            0x2e4b801bb7360ff6d90a87d882ac82b4de3914e3aa2068ee755a669878e684a6,
            0x3d53213f8bcba0e4267b8fe667b9ba9fcf7365d12b83cf9717e8b2f3e48534e,
            0x2656bc524250d4ea3a0ae2858e13402ba1b1754e60617286821c31aba408c5de
        ),
        delta_neg: delta,
        lines: LnArrays { gamma: gamma_lines(), delta: delta_lines(), },
        ic: array![
            // Starter point
            g1(
                1655549413518972190198478012616802994254462093161203201613599472264958303841,
                21742734017792296281216385119397138748114275727065024271646515586404591497876
            ),
            // Remaining input constraints
            g1(
                16497930821522159474595176304955625435616718625609462506360632944366974274906,
                10404924572941018678793755094259635830045501866471999610240845041996101882275
            )
        ],
    }
}

pub fn proof() -> (PtG1, PtG2, PtG1, u256, Fq12) {
    let pi_a = g1(
        21869318927288279352976009554602485400194222893443965440964860860113038611333,
        18311135712289946861315992474690361768373551919702286485795766144098633284656,
    );
    let pi_b = g2(
        10022883437199133497429724894217743345007175536382603527810937928471784278544,
        17847188618426698749899308504244999133998140738319907268599259829537979435105,
        7206719342459067270750328127893044383768922785737900891173474267747233610797,
        10190861912483383555079439540237798028694495449372197543107740729805978332256,
    );
    let pi_c = g1(
        9705330802798333149196349399272648034569447771243096213977283095662805051802,
        5611531129077709352565605843416215629032027923761887684873913606256162034924,
    );
    let pub_input = 16941831391195391826097405368824996545623792600381113317588874714920518273658;
    let miller_result = fq12(
        0x1bf4e21820e6cc2b2dbc9453733a8d7c48f05e73f90ecc8bdd80505d2d3b1715,
        0x264f54f6b719920c4ac00aafb3df29cc8a9ddc25e264bdee1ade5e36077d58d7,
        0xdb269e3cd7ed27d825bcbaaefb01023cf9b17beed6092f7b96eab87b571f3fe,
        0x25ce534442ee86a32c46b56d2bf289a0be5f8703fb05c260b2cb820f2b253cf,
        0x33fc62c521f4ffdcb362b12220db6c57f487906c0daf4dc9ba736f882a420e1,
        0xe8b074995703e92a7b9568c90ae160e4d5b81affe628dc1d790241de43d00d0,
        0x84e35bd0eea3430b350041d235bb394e338e3a9ed2f0a9a1ba7fe786d391de1,
        0x244d38253da236f714cb763abf68f7829ee631b4cc5ede89b382e518d676d992,
        0x1ee0a098b62c76a9ebdf4d76c8dfc1586e3fcb6a01712cbda8d10d07b32c5af4,
        0xd23aeb23acacf931f02eca9eceee31ee9607ec003ff934694119a9c6cffc4bd,
        0x16558217bb9b1bcda995b123619808719cb8a282a190630e6d06d7d03e6333ca,
        0x14354c051802f8704939c9948ef91d89db28fe9513ad7bbf58a4639af347ea86
    );
    (pi_a, pi_b, pi_c, pub_input, miller_result)
}

pub fn residue_witness() -> (Fq12, Fq12, Fq12, (Fq2, Fq2, Fq2), CubicScale) {
    let f = fq12(
        0x1bf4e21820e6cc2b2dbc9453733a8d7c48f05e73f90ecc8bdd80505d2d3b1715,
        0x264f54f6b719920c4ac00aafb3df29cc8a9ddc25e264bdee1ade5e36077d58d7,
        0xdb269e3cd7ed27d825bcbaaefb01023cf9b17beed6092f7b96eab87b571f3fe,
        0x25ce534442ee86a32c46b56d2bf289a0be5f8703fb05c260b2cb820f2b253cf,
        0x33fc62c521f4ffdcb362b12220db6c57f487906c0daf4dc9ba736f882a420e1,
        0xe8b074995703e92a7b9568c90ae160e4d5b81affe628dc1d790241de43d00d0,
        0x84e35bd0eea3430b350041d235bb394e338e3a9ed2f0a9a1ba7fe786d391de1,
        0x244d38253da236f714cb763abf68f7829ee631b4cc5ede89b382e518d676d992,
        0x1ee0a098b62c76a9ebdf4d76c8dfc1586e3fcb6a01712cbda8d10d07b32c5af4,
        0xd23aeb23acacf931f02eca9eceee31ee9607ec003ff934694119a9c6cffc4bd,
        0x16558217bb9b1bcda995b123619808719cb8a282a190630e6d06d7d03e6333ca,
        0x14354c051802f8704939c9948ef91d89db28fe9513ad7bbf58a4639af347ea86
    );

    // residue witness c,

    let c = fq12(
        0x1baf2a84eb47ce42094fd98972bc4bb0f2936ef400aea71eaff2c663e3a0fc4d,
        0x1386ba1f43d9bfa49764547c97cce737f86a88b32d9129370bdd1c3aaceae690,
        0x19ca8adfe0165968c479453ceac5d78d54beec199fd30af10476e46a7da56127,
        0x8c68ad81fefa3678a4c488228f6ec2e68fab44f5fc386a71edf490d13165baf,
        0xaa529ad6ed3d0a32aa2abd113ef97605f58eea5ace47a9a946899faefcb3895,
        0x1eeed7320d8c8646893377a138b1a265f171e37e7f73a58c52d4ec94e6bc0529,
        0x1e46a4ab1efe63cc304f321e79b74b5e52728df2fc3f3043dcdfcf9f816c568c,
        0x2c12b2472cffc96ef1cd313aeae8462296f4ad7b8e6b06073c97b7f0ebf0ad31,
        0x5303c5eded61bd49638d9b64b23971f19c50bc4651ec93df1ee04c676cf5b77,
        0x130ba50aed6232a4885ad91ee99e4a7b2c0d65e4f2ced84de31f0449ad05ca0a,
        0xa5aec882ca48f7ed31209c6ea95b0cd055cbd8c184715ce59c40ccf95c566cd,
        0x40837988d67f97256bb7e5e121802b523f460b3713e079588a5ff10659cfe2d
    );

    let c_inverse = fq12(
        0x5b9a079bc26832a0f6c91a8c3d52f0696e128c4dc02c2e7eccd6750879db37f,
        0x2e555f161b4d72f939ffdc89ec00f1933d46dbba698eb47dd16427d357fc293d,
        0x1b137f9bf629c0dbcdd8087034e1f3557ce533998e4e2566b9961515fe3e8874,
        0x9d878a403981d9dc63f4987d88df92f797412464f26753411b8e7500d316487,
        0x14e05eb80b6f7e23ecfa04a410cfa1cf8036f3161c7d586802b485fba82fa9e9,
        0x35039dc8c011db7eb2c0e91709001ba13c91c6b2a06f5ed32005c4990ed64cb,
        0xb67955a9eed460c7fe5f21790cb806e1a6faa832e5ed9751f4c769b94f233d4,
        0x1a87d2b49b7fe718a8aaed495061c6c7ab0f83010aa102badce3b5f057717586,
        0x1426dbe6a25c91a8d3ac59a34c4ea7d7e0075ef206a5dd08a33d1998b58651c1,
        0x27acb2e47242c471014d129c1a37d0fb662480c13480796cdc381735384a6c5a,
        0x7459382fd7b5f159e32ae6eb1f5a1ac9adde6e0e347011855cc9f8b5bc89021,
        0x2884f79cd78dbef6b64fd2a8af7abbb9cb36d280c0c63074e74f0287d3b2eb2d
    );

    // witness scaling wi,

    let wi = (
        fq2(0, 0),
        fq2(
            0x25ba8e0531275a44594c4f53b44497bd8d7341fd41e5faf337fa74dbbff9fe1,
            0x10bd041a04b5422922463bd8b6519b59af036109a228aa43fdb7f215226ece12,
        ),
        fq2(0, 0),
    );

    let w_pow = CubicScale::Two;
    (f, c, c_inverse, wi, w_pow)
}
